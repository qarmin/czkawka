import { Button, VerticalBox , HorizontalBox, TabWidget, ListView, StandardListView, StandardTableView, CheckBox, ScrollView, LineEdit, SpinBox} from "std-widgets.slint";
import { Settings } from "settings.slint";

global SettingsSize {
    out property <length> item_height: 30px;
}

component TextComponent inherits HorizontalLayout {
    in-out property <string> model;
    in property <string> name;
    spacing: 5px;
    Text {
        horizontal-stretch: 0.0;
        vertical-alignment: TextVerticalAlignment.center;
        text: name;
    }
    LineEdit {
        horizontal-stretch: 1.0;
        height: SettingsSize.item_height;
        text: model;
    }
}

component MinMaxSizeComponent inherits HorizontalLayout {
    spacing: 20px;
    Text {
        horizontal-stretch: 0.0;
        text:"Size";
        vertical-alignment: TextVerticalAlignment.center;
    }
    HorizontalLayout {
        spacing: 5px;
        horizontal-stretch: 1.0;
        Text {
            text:"Min:";
            vertical-alignment: TextVerticalAlignment.center;
        }
        SpinBox {
            enabled: true;
            height: SettingsSize.item_height;
        }
        Text {
            text:"Max:";
            vertical-alignment: TextVerticalAlignment.center;
        }
        SpinBox {
            enabled: true;
            height: SettingsSize.item_height;
        }
    }
}

export component SettingsList inherits VerticalLayout {
    preferred-height: 300px;
    preferred-width: 400px;

    Text {
        text: "Settings";
        height: SettingsSize.item_height;
        horizontal-alignment: TextHorizontalAlignment.center;
        font-size: 20px;
    }
    ScrollView {
        VerticalLayout {
            spacing: 5px;
            Text {
                text: "General settings";
                height: SettingsSize.item_height;
                horizontal-alignment: TextHorizontalAlignment.center;
            }
            TextComponent {
                name: "Excluded item:";
                model <=> Settings.excluded_items;
            }
            TextComponent {
                name: "Allowed extensions:";
                model <=> Settings.allowed_extensions;
            }
            MinMaxSizeComponent {

            }
        }
    }
}