import { Button, VerticalBox , HorizontalBox, TabWidget, ListView, StandardListView, StandardTableView, CheckBox, ScrollView, LineEdit, SpinBox, ComboBox, TextEdit} from "std-widgets.slint";
import { Settings } from "settings.slint";
import { Callabler } from "callabler.slint";

global SettingsSize {
    out property <length> item_height: 30px;
}

component TextComponent inherits HorizontalLayout {
    in-out property <string> model;
    in property <string> name;
    spacing: 5px;
    Text {
        horizontal-stretch: 0.0;
        vertical-alignment: TextVerticalAlignment.center;
        text: name;
    }
    LineEdit {
        horizontal-stretch: 1.0;
        height: SettingsSize.item_height;
        text: model;
    }
}

component MinMaxSizeComponent inherits HorizontalLayout {
    spacing: 20px;
    Text {
        horizontal-stretch: 0.0;
        text:"Items Size(Kb)";
        vertical-alignment: TextVerticalAlignment.center;
    }
    HorizontalLayout {
        spacing: 5px;
        horizontal-stretch: 1.0;
        Text {
            text:"Min:";
            vertical-alignment: TextVerticalAlignment.center;
        }
        SpinBox {
            enabled: true;
            maximum: 999999999999999;
            height: SettingsSize.item_height;
        }
        Text {
            text:"Max:";
            vertical-alignment: TextVerticalAlignment.center;
        }
        SpinBox {
            enabled: true;
            maximum: 999999999999999;
            height: SettingsSize.item_height;
        }
    }
}

component Presets inherits Rectangle {
    property <bool> edit_name;
    property <string> current_index;
    if !edit_name: HorizontalLayout {
        spacing: 5px;
        Text {
            text : "Current:";
            vertical-alignment: TextVerticalAlignment.center;
        }
        combo_box := ComboBox {
            current-index <=> Settings.settings_preset_idx;
            model: Settings.settings_presets;
            selected(item) => {
                Settings.settings_preset_idx = self.current_index;
                Callabler.changed_settings_preset(item, self.current_index);
            }
        }
        Button {
            text: "Edit name";
            clicked => {
                root.edit_name = !root.edit_name;
            }
        }
    }
    if edit_name : HorizontalLayout{
        spacing: 5px;
        Text {
            text: "Choose name for prefix " + (Settings.settings_preset_idx + 1);
            vertical-alignment: TextVerticalAlignment.center;
        }
        current_name := LineEdit {
            text: Settings.settings_presets[Settings.settings_preset_idx];
        }
        Button {
            text: "Save";
            clicked => {
                Settings.settings_presets[Settings.settings_preset_idx] = current_name.text;
                edit_name = false;
            }
        }
    }
}

component Language inherits HorizontalLayout {
    spacing: 5px;
    Text {     
        text: Callabler.translate("settings_language", []);
        vertical-alignment: TextVerticalAlignment.center;
    }
    ComboBox {
        model: ["English"];
    }
}

export component SettingsList inherits VerticalLayout {
    preferred-height: 300px;
    preferred-width: 400px;

    Text {
        text: "Settings";
        height: SettingsSize.item_height;
        horizontal-alignment: TextHorizontalAlignment.center;
        font-size: 20px;
    }
    ScrollView {
        VerticalLayout {
            spacing: 5px;
            Presets{
                height: SettingsSize.item_height;
            }
            Language {
                height: SettingsSize.item_height;
            }
            Text {
                text: "General settings";
                height: SettingsSize.item_height;
                horizontal-alignment: TextHorizontalAlignment.center;
                vertical-alignment: TextVerticalAlignment.center;
            }
            TextComponent {
                name: "Excluded item:";
                model <=> Settings.excluded_items;
            }
            TextComponent {
                name: "Allowed extensions:";
                model <=> Settings.allowed_extensions;
            }
            MinMaxSizeComponent {

            }
        }
    }
}