name: üêß Linux
on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * 2'

env:
  CARGO_TERM_COLOR: always

# TODO - remove appimage
jobs:
  linux-cli-krokiet-release:
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install basic libraries
        run: sudo apt update || true; sudo apt install libheif-dev libraw-dev ffmpeg -y

      - name: Setup rust version
        run: rustup default 1.85.0

      - name: Build Release
        run: |
          sed -i 's/#lto = "thin"/lto = "thin"/g' Cargo.toml
          cargo build --release --bin czkawka_cli --bin krokiet

      - name: Store Linux CLI
        uses: actions/upload-artifact@v4
        with:
          name: czkawka_cli-${{ runner.os }}-release
          path: target/release/czkawka_cli

      - name: Store Linux Krokiet
        uses: actions/upload-artifact@v4
        with:
          name: krokiet-${{ runner.os }}-release
          path: target/release/krokiet

      - name: Prepare files to release
        run: |
          mv target/release/czkawka_cli linux_czkawka_cli
          mv target/release/krokiet linux_krokiet

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "Nightly"
          files: |
            linux_czkawka_cli
            linux_krokiet
          token: ${{ secrets.PAT_REPOSITORY }}

  # GUI not works :(
  # https://github.com/slint-ui/slint/issues/7586
  # https://github.com/rust-windowing/winit/issues/1818
  linux-cli-release-musl:
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install basic libraries
        run: |
          sudo apt update || true; sudo apt install libheif-dev libraw-dev ffmpeg -y
          sudo apt install musl-tools -y

      - name: Setup rust version
        run: |
          rustup default 1.85.0
          rustup target add x86_64-unknown-linux-musl

      - name: Build Release
        run: |
          sed -i 's/#lto = "thin"/lto = "thin"/g' Cargo.toml
          cargo build --release --bin czkawka_cli --bin krokiet --target x86_64-unknown-linux-musl

      - name: Store Linux CLI
        uses: actions/upload-artifact@v4
        with:
          name: czkawka_cli-${{ runner.os }}-release-musl
          path: target/x86_64-unknown-linux-musl/release/czkawka_cli

      - name: Prepare files to release
        run: |
          mv target/x86_64-unknown-linux-musl/release/czkawka_cli linux_czkawka_cli_musl

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "Nightly"
          files: |
            linux_czkawka_cli_musl
          token: ${{ secrets.PAT_REPOSITORY }}

# TODO - also test czkawka_gui - this requires now gtk4:i386
linux-all-debug-32bit:
  if: ${{ github.ref != 'refs/heads/master' }}
  runs-on: ubuntu-22.04
  steps:
    - uses: actions/checkout@v4

    - name: Install basic libraries
      run: |
        sudo apt update || true
        sudo apt install libheif-dev libraw-dev ffmpeg libgtk-4-dev gcc-multilib -y

    - name: Setup rust version and target
      run: |
        rustup default 1.85.0
        rustup target add i686-unknown-linux-gnu

    - name: Build Debug for 32-bit
      run: |
        sed -i 's/^\(\[profile\.dev\.package.*\)/#\1/' Cargo.toml
        sed -i 's|^opt-level = 3 # OPT PACKAGES|#opt-level = 3 # OPT PACKAGES|' Cargo.toml
        cargo build --target i686-unknown-linux-gnu --bin czkawka_cli --bin krokiet


  linux-cli-krokiet-debug:
    if: ${{ github.ref != 'refs/heads/master' }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install basic libraries
        run: sudo apt update || true; sudo apt install libheif-dev libraw-dev ffmpeg -y

      - name: Setup rust version
        run: rustup default 1.85.0

      - name: Build Debug
        run: |
          sed -i 's/^\(\[profile\.dev\.package.*\)/#\1/' Cargo.toml
          sed -i 's|^opt-level = 3 # OPT PACKAGES|#opt-level = 3 # OPT PACKAGES|' Cargo.toml
          cargo build --bin czkawka_cli --bin krokiet

      - name: Store Linux CLI Debug
        uses: actions/upload-artifact@v4
        with:
          name: czkawka_cli-${{ runner.os }}-debug
          path: target/debug/czkawka_cli

      - name: Store Linux Krokiet Debug
        uses: actions/upload-artifact@v4
        with:
          name: krokiet-${{ runner.os }}-debug
          path: target/debug/krokiet


  linux-krokiet-gui-heif:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install basic libraries
        run: sudo apt update || true; sudo apt install libheif-dev libraw-dev -y

      - name: Setup rust version
        run: rustup default 1.85.0

      - name: Enable LTO
        if: ${{ github.ref == 'refs/heads/master' }}
        run: sed -i 's/#lto = "thin"/lto = "thin"/g' Cargo.toml

      - name: Build Release Krokiet heif
        run: cargo build --release --bin krokiet --features "heif,libraw"

      - name: Store Linux GUI Krokiet heif libraw
        uses: actions/upload-artifact@v4
        with:
          name: krokiet-${{ runner.os }}-heif-libraw
          path: target/release/krokiet

      - name: Prepare files to release
        run: |
          mv target/release/krokiet linux_krokiet_heif_raw_gui
      - name: Release
        uses: softprops/action-gh-release@v2
        if: ${{ github.ref == 'refs/heads/master' }}
        with:
          tag_name: "Nightly"
          files: |
            linux_krokiet_heif_raw_gui
          token: ${{ secrets.PAT_REPOSITORY }}

  linux-gui:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install basic libraries
        run: sudo apt update || true; sudo apt install libgtk-4-dev libheif-dev libraw-dev -y

      - name: Setup rust version
        run: rustup default 1.85.0

      - name: Enable LTO
        if: ${{ github.ref == 'refs/heads/master' }}
        run: sed -i 's/#lto = "thin"/lto = "thin"/g' Cargo.toml

      - name: Build Release Heif Libraw
        run: cargo build --release --bin czkawka_gui --features "heif,libraw"

      - name: Store Linux GUI Heif Libraw
        uses: actions/upload-artifact@v4
        with:
          name: czkawka_gui-${{ runner.os }}-heif-libraw
          path: target/release/czkawka_gui

      - name: Build Release
        run: cargo build --release --bin czkawka_gui

      - name: Store Linux GUI
        uses: actions/upload-artifact@v4
        with:
          name: czkawka_gui-${{ runner.os }}
          path: target/release/czkawka_gui

      - name: Prepare files to release
        run: |
          mv target/release/czkawka_gui linux_czkawka_gui
      - name: Release
        uses: softprops/action-gh-release@v2
        if: ${{ github.ref == 'refs/heads/master' }}
        with:
          tag_name: "Nightly"
          files: |
            linux_czkawka_gui
          token: ${{ secrets.PAT_REPOSITORY }}

  linux-appimage-gui:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: sudo apt update || true; sudo apt install libgtk-4-dev libheif-dev libraw-dev librsvg2-dev wget fuse libfuse2 desktop-file-utils -y

      - name: Setup rust version
        run: rustup default 1.85.0

      - name: Enable LTO
        if: ${{ github.ref == 'refs/heads/master' }}
        run: sed -i 's/#lto = "thin"/lto = "thin"/g' Cargo.toml

      - name: Build Release
        run: cargo build --release --bin czkawka_gui

      - name: Download appimage dependencies
        run: |
          pwd
          wget -c "https://raw.githubusercontent.com/linuxdeploy/linuxdeploy-plugin-gtk/master/linuxdeploy-plugin-gtk.sh"
          wget -c "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
          wget -c "https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x linuxdeploy-plugin-gtk.sh
          chmod +x linuxdeploy-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          mkdir -p AppDir/usr/bin
          pwd
          cp target/release/czkawka_gui AppDir/usr/bin
          ./linuxdeploy-x86_64.AppImage --appdir AppDir --plugin gtk --icon-file data/icons/com.github.qarmin.czkawka.svg --desktop-file data/com.github.qarmin.czkawka.desktop
          ./appimagetool-x86_64.AppImage --comp zstd --mksquashfs-opt -Xcompression-level --mksquashfs-opt 20 \
            -u "gh-releases-zsync|$GITHUB_REPOSITORY_OWNER|czkawka|latest|*.AppImage.zsync" \
            ./AppDir

      - name: Store Linux Appimage GUI
        uses: actions/upload-artifact@v4
        with:
          name: czkawka_gui-appimage-${{ runner.os }}
          path: Czkawka*.AppImage

      - name: Store Linux Appimage GUI Zsync
        uses: actions/upload-artifact@v4
        with:
          name: czkawka_gui-appimage-${{ runner.os }}.zsync
          path: Czkawka*.AppImage.zsync

      - name: Minimal AppImage
        run: |
          pwd
          rm -rf czkawka_gui
          cp target/release/czkawka_gui .
          strip czkawka_gui
          wget https://github.com/qarmin/Automated-Fuzzer/releases/download/test/pkg2appimage-1eceb30-x86_64.AppImage -O pkg2.appimage
          # TODO - official link from below, no longer works and there is no official releases except continuous versions which have no stable version numbering
          # wget https://github.com/AppImageCommunity/pkg2appimage/releases/download/continuous/pkg2appimage--x86_64.AppImage -O pkg2.appimage
          chmod +x ./pkg2.appimage
          ./pkg2.appimage misc/czkawka-appimage-recipe.yml
          mv out/Czkawka*.AppImage out/czkawka_gui-minimal.AppImage

      - name: Minimal Appimage Upload
        uses: actions/upload-artifact@v4
        with:
          name: czkawka_gui_minimal_AppImage
          path: out/*.AppImage

      - name: Prepare files to release
        run: |
          mv out/czkawka_gui-minimal.AppImage linux_czkawka_gui_minimal.AppImage
      - name: Release
        uses: softprops/action-gh-release@v2
        if: ${{ github.ref == 'refs/heads/master' }}
        with:
          tag_name: "Nightly"
          files: |
            linux_czkawka_gui_minimal.AppImage
          token: ${{ secrets.PAT_REPOSITORY }}

  linux-tests:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install basic libraries
        run: sudo apt update || true; sudo apt install libgtk-4-dev libheif-dev libraw-dev -y

      - name: Setup rust version
        run: rustup default 1.85.0

      - name: Test
        run: |
          xvfb-run cargo test

  linux-regression-tests-on-minimal-rust-version:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install basic libraries
        run: sudo apt update || true; sudo apt install libgtk-4-dev libheif-dev libraw-dev ffmpeg -y

      - name: Setup rust version
        run: rustup default 1.85.0

      - name: Build
        run: |
          cargo check
          cargo check --features "heif,libraw"

      - name: Build test version
        run: cargo build --profile test --bin czkawka_cli

      - name: Linux Regression Test
        run: |
          wget https://github.com/qarmin/czkawka/releases/download/6.0.0/TestFiles.zip
          cd ci_tester
          cargo build --release
          cd ..

          ci_tester/target/release/ci_tester target/debug/czkawka_cli

  linux-arm-release:
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-22.04-arm
    steps:
      - uses: actions/checkout@v4

      - name: Install basic libraries
        run: sudo apt update || true; sudo apt install libgtk-4-dev libheif-dev libraw-dev -y

      - name: Setup rust version
        run: rustup default 1.85.0

      - name: Build Release
        run: |
          sed -i 's/#lto = "thin"/lto = "thin"/g' Cargo.toml
          cargo build --release

      - name: Store cli
        uses: actions/upload-artifact@v4
        with:
          name: czkawka_cli-${{ runner.os }}-arm-release
          path: |
            target/release/czkawka_cli

      - name: Store gui
        uses: actions/upload-artifact@v4
        with:
          name: czkawka_gui-${{ runner.os }}-arm-release
          path: |
            target/release/czkawka_gui

      - name: Store krokiet
        uses: actions/upload-artifact@v4
        with:
          name: krokiet-${{ runner.os }}-arm-release
          path: |
            target/release/krokiet

      - name: Prepare files to release
        run: |
          mv target/release/czkawka_cli linux_czkawka_cli_arm
          mv target/release/czkawka_gui linux_czkawka_gui_arm
          mv target/release/krokiet linux_krokiet_arm

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "Nightly"
          files: |
            linux_czkawka_cli_arm
            linux_czkawka_gui_arm
            linux_krokiet_arm
          token: ${{ secrets.PAT_REPOSITORY }}

  linux-arm-debug:
    if: ${{ github.ref != 'refs/heads/master' }}
    runs-on: ubuntu-22.04-arm
    steps:
      - uses: actions/checkout@v4

      - name: Install basic libraries
        run: sudo apt update || true; sudo apt install libgtk-4-dev libheif-dev libraw-dev -y

      - name: Setup rust version
        run: rustup default 1.85.0

      - name: Build Debug
        run: |
          sed -i 's/^\(\[profile\.dev\.package.*\)/#\1/' Cargo.toml
          sed -i 's|^opt-level = 3 # OPT PACKAGES|#opt-level = 3 # OPT PACKAGES|' Cargo.toml
          cargo build

      - name: Store cli
        uses: actions/upload-artifact@v4
        with:
          name: czkawka_cli-${{ runner.os }}-arm-debug
          path: |
            target/debug/czkawka_cli

      - name: Store gui
        uses: actions/upload-artifact@v4
        with:
          name: czkawka_gui-${{ runner.os }}-arm-debug
          path: |
            target/debug/czkawka_gui

      - name: Store krokiet
        uses: actions/upload-artifact@v4
        with:
          name: krokiet-${{ runner.os }}-arm-debug
          path: |
            target/debug/krokiet
